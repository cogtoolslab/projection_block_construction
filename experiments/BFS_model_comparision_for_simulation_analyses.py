import argparse
from pathlib import Path

import pandas as pd

from scoping_simulations.experiments.simulated_subgoal_planner_experiment_runner import (
    run_experiment as run_experiment_simulated_subgoal_planner,
)
from scoping_simulations.experiments.subgoal_generator_runner import (
    run_experiment as run_experiment_subgoal_generator,
)
from scoping_simulations.model.BFS_Agent import BFS_Agent
from scoping_simulations.model.Simulated_Subgoal_Agent import Simulated_Subgoal_Agent
from scoping_simulations.model.Subgoal_Planning_Agent import *
from scoping_simulations.model.utils.decomposition_functions import *

FRACTION_OF_CPUS = False  # 0.5


def get_BFS_dfs(worlds, save="analysis/simulated_subgoal_agent_BFS"):
    decomposer = No_Subgoals()
    sga = Subgoal_Planning_Agent(lower_agent=BFS_Agent(), decomposer=decomposer)
    ns_agent = Simulated_Subgoal_Agent(
        decomposer=decomposer, label="BFS No Subgoals", step_size=-1
    )

    print("Running the subgoal generator")
    results = run_experiment_subgoal_generator(
        worlds,
        [
            sga,
            1,
            1,
        ],
        parallelized=FRACTION_OF_CPUS,
        save=False,
        maxtasksperprocess=1,
    )

    print("Done. Generating No Subgoal runs...")
    run_experiment_simulated_subgoal_planner(
        results, [ns_agent], 1, 16, parallelized=FRACTION_OF_CPUS, save=save
    )

    print("Done.")


def load_df_from_other_agent(file_path):
    """Load in a file that contains simulated subgoal agents with other base algorithms generated by `simulated_subgoal_planner_experiment_runner`. Provide path to .pkl"""
    print("Loading {}".format(df_path))
    df = pd.read_pickle(file_path)
    worlds = list(df["_world"].unique())
    print(f"Got {len(worlds)} worlds.")
    get_BFS_dfs(worlds, save=file_path.split("/")[-1].split(".pkl")[0] + "_BFS")


if __name__ == "__main__":
    # get path from command line input
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--df_path",
        help="path to dataframe to load",
        default="analysis/Simulation_Analysis_Worlds.pkl",
    )
    args = parser.parse_args()
    df_path = Path(args.df_path).absolute()
    print("Using dataframe from {}".format(df_path))
    try:
        print("Trying to treat as just worlds")
        worlds = pd.read_pickle(df_path)
        worlds = {l: w for l, w in zip(worlds.world, worlds._world)}
        get_BFS_dfs(worlds)
    except Exception as e:
        print("Failed to load as world from {}".format(df_path), "with", e)
        print("Trying to load as dataframe from simulated agents")
        load_df_from_other_agent(df_path)
